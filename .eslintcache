[{"C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\index.js":"1","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\app\\index.js":"2","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\app\\app.js":"3","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\header\\header.js":"4","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\random-planet\\index.js":"5","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\random-planet\\random-planet.js":"6","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\item-list\\index.js":"7","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\item-list\\item-list.js":"8","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\person-details\\index.js":"9","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\person-details\\person-details.js":"10","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\services\\swapi-service.js":"11","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\spinner\\spinner.js":"12","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\spinner\\index.js":"13","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\error-indicator\\index.js":"14","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\error-indicator\\error-indicator.js":"15"},{"size":167,"mtime":1611585235560,"results":"16","hashOfConfig":"17"},{"size":0,"mtime":1611583010252,"results":"18","hashOfConfig":"17"},{"size":1358,"mtime":1612991247959,"results":"19","hashOfConfig":"17"},{"size":467,"mtime":1611586379286,"results":"20","hashOfConfig":"17"},{"size":0,"mtime":1611583180973,"results":"21","hashOfConfig":"17"},{"size":2449,"mtime":1612296642712,"results":"22","hashOfConfig":"17"},{"size":0,"mtime":1611583080068,"results":"23","hashOfConfig":"17"},{"size":1020,"mtime":1612990607709,"results":"24","hashOfConfig":"17"},{"size":0,"mtime":1611583114337,"results":"25","hashOfConfig":"17"},{"size":971,"mtime":1611927961553,"results":"26","hashOfConfig":"17"},{"size":2123,"mtime":1612990373645,"results":"27","hashOfConfig":"17"},{"size":398,"mtime":1611927216614,"results":"28","hashOfConfig":"17"},{"size":0,"mtime":1611778114107,"results":"29","hashOfConfig":"17"},{"size":0,"mtime":1611917203585,"results":"30","hashOfConfig":"17"},{"size":497,"mtime":1611919197204,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"3r5cca",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\index.js",[],["69","70"],"C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\app\\index.js",[],["71","72"],"C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\app\\app.js",[],"C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\header\\header.js",["73","74","75","76"],"import React from \"react\";\r\nimport './header.css';\r\n\r\nconst Header = () => {\r\n return (\r\n    <div className=\"container header d-flex\">\r\n    <h3>\r\n      <a href=\"#\">\r\n        StarDB\r\n      </a>\r\n    </h3>\r\n    <ul className=\"d-flex\">\r\n      <li>\r\n        <a href=\"#\">People</a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#\">Planets</a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#\">Starships</a>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n};\r\n \r\n\r\n\r\nexport default Header;","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\random-planet\\index.js",[],["77","78"],"C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\random-planet\\random-planet.js",["79"],"import React, { Component } from 'react';\r\n\r\nimport './random-planet.css';\r\nimport SwapiService from '../../services/swapi-service';\r\nimport Spinner from '../spinner/spinner';\r\nimport ErrorIndicator from '../error-indicator/error-indicator';\r\n\r\nexport default class RandomPlanet extends Component {\r\n\r\n  swapiService = new SwapiService ();\r\n\r\n  state = {\r\n    planet: {},\r\n    loading:true,\r\n    error:false\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    this.updatePlanet();\r\n    this.interval = setInterval(this.updatePlanet,1500);\r\n  }\r\n\r\n  onPlanetLoaded = (planet) => {\r\n   this.setState({planet,loading:false})\r\n  }\r\n\r\n  onError = (err) => {\r\n this.setState({\r\n   error:true,\r\n   loading:false\r\n })\r\n  };\r\n\r\n  updatePlanet = () => {\r\n    const id = Math.floor(Math.random()*25) +3;\r\nthis.swapiService\r\n    .getPlanet(id)\r\n    .then(this.onPlanetLoaded)\r\n    .catch(this.onError);\r\n  };\r\n\r\n  render() {\r\n\r\n    const { planet, loading, error } = this.state;\r\n\r\n    const hasData = !(loading || error)\r\n    const errorMessage = error ? <ErrorIndicator/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = hasData ? <PlanetView planet ={planet} /> : null;\r\n\r\n    return (\r\n      <div className=\"random-planet jumbotron rounded\">\r\n        {errorMessage}\r\n        {spinner}\r\n        {content}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst PlanetView = ( {planet} ) => {\r\n  const {id,name,population,\r\n    rotationPeriod,diameter,terrain} = planet;\r\n  return(\r\n   <React.Fragment>\r\n  <img className=\"planet-image\"\r\n             src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} />\r\n        <div>\r\n          <h4>{name}</h4>\r\n          <ul className=\"list-group list-group-flush\">\r\n            <li className=\"list-group-item\">\r\n              <span className=\"term\">Population:</span>\r\n              <span>{population} individuals</span>\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              <span className=\"term\">Rotation Period:</span>\r\n              <span>{rotationPeriod} month</span>\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              <span className=\"term\">Diameter:</span>\r\n              <span>{diameter} kmÂ²</span>\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              <span className=\"term\">Terrain:</span>\r\n              <span>{terrain}</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n   </React.Fragment>\r\n);\r\n};","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\item-list\\index.js",[],"C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\item-list\\item-list.js",[],"C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\person-details\\index.js",[],"C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\person-details\\person-details.js",["80"],"import React, { Component } from 'react';\r\n\r\nimport './person-details.css';\r\n\r\nexport default class PersonDetails extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"person-details card\">\r\n        <img className=\"person-image\"\r\n          src=\"https://starwars-visualguide.com/assets/img/characters/3.jpg\" />\r\n\r\n        <div className=\"card-body\">\r\n          <h4>R2-D2</h4>\r\n          <ul className=\"list-group list-group-flush\">\r\n            <li className=\"list-group-item\">\r\n              <span className=\"term\">Gender :</span>\r\n              <span>male</span>\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              <span className=\"term\">Birth Year :</span>\r\n              <span>43</span>\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              <span className=\"term\">Eye Color :</span>\r\n              <span>red</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\services\\swapi-service.js",["81"],"\r\nexport default class SwapiService {\r\n    _apiBase = 'https://swapi.dev/api';\r\n    async getResource (url) {\r\n     const res = await fetch (`${this._apiBase}${url}`);\r\n     if (!res.ok) {\r\n         throw new Error (`Could not fetch ${url}` + `, received ${res.status}`);\r\n     }\r\n      return await res.json();\r\n    } \r\n\r\n  async getAllPeople () {\r\n    const res = await this.getResource( `/people/`);\r\n    return res.results.map(this._transformPerson);\r\n  } \r\n\r\n  async getPerson (id) {\r\n    const person = await this.getResource (`/people/${id}/`);\r\n    return this._transformPerson(person);\r\n  }\r\n  async getAllPlanets () {\r\n    const res = await this.getResource( `/planets/`);\r\n    return res.results.map(this._transformPlanet);\r\n  } \r\n\r\n  async getPlanet (id) {\r\n    const planet = await this.getResource (`/planets/${id}/`);\r\n    return this._transformPlanet(planet);\r\n  }\r\n  async getAllStarships () {\r\n    const res = await this.getResource( `/starships/`);\r\n    return res.results.map(this._transformStarship);\r\n  } \r\n\r\n  async getStarship (id) {\r\n    const starship = await this.getResource (`/starships/${id}/`);\r\n    return this._transformStarship(starship);\r\n  }\r\n\r\n  _extractId (item) {\r\n    const idRegExp = /\\/([0-9])*\\/$/;\r\n    return item.url.match(idRegExp)[1];\r\n  }\r\n\r\n_transformStarship = (starship) => {\r\n return {\r\n   id: this._extractId(starship),\r\n   name: starship.name,\r\n   model: starship.model,\r\n   manufacturer:starship.manufacturer,\r\n   costInCredits:starship.costInCredits,\r\n   length:starship.length,\r\n   crew:starship.crew,\r\n   passengers:starship.passengers,\r\n   cargoCapacity:starship.cargoCapacity\r\n }\r\n};\r\n\r\n_transformPerson = (person) => {\r\n  return {\r\n    id: this._extractId(person),\r\n    name:person.name,\r\n    gender:person.gender,\r\n    birthYear:person.birthYear,\r\n    eyeColor:person.eyeColor\r\n  }\r\n};\r\n\r\n\r\n_transformPlanet = (planet) => {\r\n   return {\r\n      id: this._extractId(planet),\r\n      name:planet.name,\r\n      population:planet.population,\r\n      rotationPeriod:planet.rotation_period,\r\n      diameter:planet.diameter,\r\n      terrain:planet.terrain\r\n   }\r\n}\r\n};\r\n\r\n","C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\spinner\\spinner.js",[],"C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\spinner\\index.js",[],"C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\error-indicator\\index.js",[],"C:\\Users\\Zarov\\Documents\\GitHub\\star_db\\src\\components\\error-indicator\\error-indicator.js",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"82","replacedBy":"86"},{"ruleId":"84","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":8,"column":7,"nodeType":"90","endLine":8,"endColumn":19},{"ruleId":"88","severity":1,"message":"89","line":14,"column":9,"nodeType":"90","endLine":14,"endColumn":21},{"ruleId":"88","severity":1,"message":"89","line":17,"column":9,"nodeType":"90","endLine":17,"endColumn":21},{"ruleId":"88","severity":1,"message":"89","line":20,"column":9,"nodeType":"90","endLine":20,"endColumn":21},{"ruleId":"82","replacedBy":"91"},{"ruleId":"84","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":68,"column":3,"nodeType":"90","endLine":69,"endColumn":86},{"ruleId":"93","severity":1,"message":"94","line":10,"column":9,"nodeType":"90","endLine":11,"endColumn":80},{"ruleId":"95","severity":1,"message":"96","line":7,"column":52,"nodeType":"97","messageId":"98","endLine":7,"endColumn":53},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],["99"],["100"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["99"],["100"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation"]